# -*- coding: utf-8 -*-
"""Pan_Tampering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XHB_9MSWsgzLxZmc3fmr3jWwSJv5gG6n
"""

from skimage.metrics import structural_similarity
import imutils
import cv2
from PIL import Image
import requests
import numpy as np

!mkdir pan_card_tampering
!mkdir pan_card_tampering/image

original = Image.open(requests.get('https://www.thestatesman.com/wp-content/uploads/2019/07/pan-card.jpg', stream=True).raw)
tampered = Image.open(requests.get('https://assets1.cleartax-cdn.com/s/img/20170526124335/Pan4.png', stream=True).raw)

print('Original Dimensions : ', original.size)
print('Tampered Dimensions : ', tampered.size)

original = original.resize((250, 160))
tampered = tampered.resize((250, 160))

original

tampered

original_grey = cv2.cvtColor(np.array(original), cv2.COLOR_RGB2GRAY)
tampered_grey = cv2.cvtColor(np.array(tampered), cv2.COLOR_RGB2GRAY)

(score, diff) = structural_similarity(original_grey, tampered_grey, full=True)
diff = (diff * 255).astype("uint8")
print("SSIM: {}".format(score))

thresh = cv2.threshold(diff, 0 , 255, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)[1]
cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
cnts = imutils.grab_contours(cnts)

for c in cnts:
  (x, y, w, h) = cv2.boundingRect(c)
  cv2.rectangle(np.array(original), (x, y), (x + w, y + h), (0, 0, 255), 2)
  cv2.rectangle(np.array(tampered), (x, y), (x + w, y + h), (0, 0, 255), 2).astype(np.uint8)

print('Original Format Image')
Image.fromarray(np.array(original))

print('Different Image')
Image.fromarray(diff)

print('Threshold Image')
Image.fromarray(thresh)