# -*- coding: utf-8 -*-
"""Bird.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ju3Nza-kpf68cSaOMVhsAWNvseSTWAMt
"""

import cv2
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
from keras.preprocessing.image import img_to_array, array_to_img
from keras.optimizers import Adam
from matplotlib.image import imread
from sklearn.model_selection import train_test_split
from keras.layers import Dense, Conv2D, MaxPooling2D, Flatten
from sklearn.preprocessing import LabelBinarizer
from keras.models import Sequential

import random
import os
from os import listdir
path = '/content/drive/MyDrive/Colab Notebooks/AI/Bird_species/Data/Bird Speciees Dataset/AMERICAN GOLDFINCH'
plt.figure(figsize=(12,12))
for i in range(1, 17):
  plt.subplot(4,4,i)
  plt.tight_layout()
  rand_img = imread(path+"/"+ random.choice(sorted(listdir(path))))
  plt.imshow(rand_img)
  plt.xlabel(rand_img.shape[1], fontsize = 10)
  plt.ylabel(rand_img.shape[0], fontsize = 10)

directory = "/content/drive/MyDrive/Colab Notebooks/AI/Bird_species/Data/Bird Speciees Dataset"
image_list = []
label_list = []
root_dir = listdir(directory)
for dir in root_dir:
    for file in listdir(f"{directory}/{dir}"):
        image_path = f"{directory}/{dir}/{file}"
        image = cv2.imread(image_path)
        image = img_to_array(image)
        image_list.append(image)
        label_list.append(dir)

# Visualize the number of classes count
import pandas as pd
label_counts = pd.DataFrame(label_list).value_counts()
label_counts

num_classes = len(label_counts)
num_classes

image_list[0].shape

label_list = np.array(label_list)

xtrain, xtest, ytrain, ytest = train_test_split(image_list, label_list, test_size=0.2, random_state=42)

# Normalize and reshape data
x_train = np.array(xtrain, dtype=np.float16) / 225.0
x_test = np.array(xtest, dtype=np.float16) / 225.0
x_train = x_train.reshape( -1, 224,224,3)
x_test = x_test.reshape( -1, 224,224,3)

lb = LabelBinarizer()
y_train = lb.fit_transform(ytrain)
y_test = lb.fit_transform(ytest)
print(lb.classes_)

x_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size = 0.2)

# Building model architecture
model = Sequential()
model.add(Conv2D(8, (3, 3), padding="same",input_shape=(224,224,3), activation="relu"))
model.add(MaxPooling2D(pool_size=(3, 3)))
model.add(Conv2D(16, (3, 3), padding="same", activation="relu"))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(32, (3, 3), padding="same", activation="relu"))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(32, activation="relu"))
model.add(Dense(num_classes, activation="softmax"))
model.summary()

model.compile(loss = 'categorical_crossentropy', optimizer = Adam(0.0005),metrics=['accuracy'])

epochs = 50
batch_size = 128
history = model.fit(x_train, y_train, batch_size = batch_size, epochs = epochs, validation_data = (x_val, y_val))

#Plot the training history
plt.figure(figsize=(12, 5))
plt.plot(history.history['accuracy'], color='r')
plt.plot(history.history['val_accuracy'], color='b')
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epochs')
plt.legend(['train', 'val'])
plt.show()

plt.figure(figsize=(12, 5))
plt.plot(history.history['loss'], color='r')
plt.plot(history.history['val_loss'], color='b')
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epochs')
plt.legend(['train', 'val'])
plt.show()

# Calculating test accuracy
scores = model.evaluate(x_test, y_test)
print(f"Test Accuracy: {scores[1]*100}")

y_pred = model.predict(x_test)

img = array_to_img(x_test[20])
img

# Finding max value from predition list and comaparing original value vs predicted
labels = lb.classes_
print(labels)
print("Originally : ",labels[np.argmax(y_test[5])])
print("Predicted : ",labels[np.argmax(y_pred[5])])